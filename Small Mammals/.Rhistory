}else{
stop <- start+50
}
show_col(hue_pal(h = c(start, stop))(nGenera))
Genus_Colors <- rbind(Genus_Colors, cbind(Genera, hue_pal(h = c(start, stop))(nGenera)))
start <- stop+20
i=5
Genera <- unique(mammals_filtered[which(mammals_filtered$Family==levels(mammals_filtered$Family)[i]),'Genus'])
nGenera <- nrow(Genera)
if (nGenera <= 3){
stop <- start+20
}else{
stop <- start+50
}
show_col(hue_pal(h = c(start, stop))(nGenera))
Genus_Colors <- rbind(Genus_Colors, cbind(Genera, hue_pal(h = c(start, stop))(nGenera)))
start <- stop+20
length(levels(mammals_filtered$Family))
i=6
Genera <- unique(mammals_filtered[which(mammals_filtered$Family==levels(mammals_filtered$Family)[i]),'Genus'])
nGenera <- nrow(Genera)
if (nGenera <= 3){
stop <- start+20
}else{
stop <- start+50
}
show_col(hue_pal(h = c(start, stop))(nGenera))
Genus_Colors <- rbind(Genus_Colors, cbind(Genera, hue_pal(h = c(start, stop))(nGenera)))
start <- stop+20
start
i=7
Genera <- unique(mammals_filtered[which(mammals_filtered$Family==levels(mammals_filtered$Family)[i]),'Genus'])
nGenera <- nrow(Genera)
if (nGenera <= 3){
stop <- start+20
}else{
stop <- start+50
}
show_col(hue_pal(h = c(start, stop))(nGenera))
Genus_Colors <- rbind(Genus_Colors, cbind(Genera, hue_pal(h = c(start, stop))(nGenera)))
start
stop
colnames(Genus_Colors)[2] <- "color"
Genus_Colors
# reorder Genus levels to match taxonomy in Genus_Colors
mammals_filtered$Genus <- factor(mammals_filtered$Genus,levels(mammals_filtered$Genus)[match(Genus_Colors[,'Genus'], levels(mammals_filtered$Genus))])
mammals_filtered$Genus
bp<- ggplot(mammals_filtered, aes(x="", y=n, fill= Genus)) +
scale_fill_manual(values=Genus_Colors[,'color']) +
geom_bar(stat = "identity", position = position_fill()) +
geom_text(aes(label = n), size=1, position = position_fill(vjust = 0.5)) +
coord_polar("y", start=0) +
theme(legend.position="none") +
facet_grid(. ~ box) +
theme_light()
bp
Genus_Colors[,'color']
levels(Genus_Colors$color)
show_col(Genus_Colors$color)
i=1
Genus_Colors <- NULL
start <- 0
stop <- 0
Genera <- unique(mammals_filtered[which(mammals_filtered$Family==levels(mammals_filtered$Family)[i]),'Genus'])
nGenera <- nrow(Genera)
if (nGenera <= 3){
stop <- start+20
}else{
stop <- start+50
}
show_col(hue_pal(h = c(start, stop))(nGenera))
Genus_Colors <- NULL
start <- 0
stop <- 0
for (i in 1:length(levels(mammals_filtered$Family))){
Genera <- unique(mammals_filtered[which(mammals_filtered$Family==levels(mammals_filtered$Family)[i]),'Genus'])
nGenera <- nrow(Genera)
if (nGenera <= 3){
stop <- start+20
}else{
stop <- start+50
}
show_col(hue_pal(h = c(start, stop))(nGenera))
Genus_Colors <- rbind(Genus_Colors, cbind(Genera, hue_pal(h = c(start, stop))(nGenera)))
start <- stop+20
}
colnames(Genus_Colors)[2] <- "color"
bp<- ggplot(mammals_filtered, aes(x="", y=n, fill= Genus)) +
scale_fill_manual(values=Genus_Colors[,'color']) +
geom_bar(stat = "identity", position = position_fill()) +
geom_text(aes(label = n), size=1, position = position_fill(vjust = 0.5)) +
coord_polar("y", start=0) +
theme(legend.position="none") +
facet_grid(. ~ box) +
theme_light()
bp
Genus_Colors
show_col(Genus_Colors)
show_col(Genus_Colors$color)
show_col(Genus_Colors$color)
col2rgb(Genus_Colors$color, alpha = FALSE)
col2rgb(Genus_Colors$color, alpha = FALSE)[1,]
col2rgb(Genus_Colors$color, alpha = FALSE)[1,]/255
?rgb
col2rgb(Genus_Colors$color, alpha = FALSE)/255
show_col(rgb(col2rgb(Genus_Colors$color, alpha = FALSE)/255))
col2rgb(Genus_Colors$color, alpha = FALSE)/255
t(col2rgb(Genus_Colors$color, alpha = FALSE)/255)
show_col(rgb(t(col2rgb(Genus_Colors$color, alpha = FALSE)/255)))
Genus_Colors <- NULL
start <- 0
stop <- 0
for (i in 1:length(levels(mammals_filtered$Family))){
Genera <- unique(mammals_filtered[which(mammals_filtered$Family==levels(mammals_filtered$Family)[i]),'Genus'])
nGenera <- nrow(Genera)
if (nGenera <= 3){
stop <- start+20
}else{
stop <- start+50
}
show_col(hue_pal(h = c(start, stop))(nGenera))
Genus_Colors <- rbind(Genus_Colors, cbind(Genera, hue_pal(h = c(start, stop))(nGenera)))
start <- stop+20
}
colnames(Genus_Colors)[2] <- "color"
# reorder Genus levels to match taxonomy in Genus_Colors
mammals_filtered$Genus <- factor(mammals_filtered$Genus,levels(mammals_filtered$Genus)[match(Genus_Colors[,'Genus'], levels(mammals_filtered$Genus))])
show_col(rgb(t(col2rgb(Genus_Colors$color, alpha = FALSE)/255)))
bp<- ggplot(mammals_filtered, aes(x="", y=n, fill= Genus)) +
scale_fill_manual(values=rgb(t(col2rgb(Genus_Colors$color, alpha = FALSE)/255))) +
geom_bar(stat = "identity", position = position_fill()) +
geom_text(aes(label = n), size=1, position = position_fill(vjust = 0.5)) +
coord_polar("y", start=0) +
theme(legend.position="none") +
facet_grid(. ~ box) +
theme_light()
bp
?legend.position
?theme
bp<- ggplot(mammals_filtered, aes(x="", y=n, fill= Genus)) +
scale_fill_manual(values=rgb(t(col2rgb(Genus_Colors$color, alpha = FALSE)/255))) +
geom_bar(stat = "identity", position = position_fill()) +
geom_text(aes(label = n), size=1, position = position_fill(vjust = 0.5)) +
coord_polar("y", start=0) +
theme(legend.position="bottom") +
facet_grid(. ~ box) +
theme_light()
bp
bp<- ggplot(mammals_filtered, aes(x="", y=n, fill= Genus)) +
scale_fill_manual(values=rgb(t(col2rgb(Genus_Colors$color, alpha = FALSE)/255))) +
geom_bar(stat = "identity", position = position_fill()) +
geom_text(aes(label = n), size=1, position = position_fill(vjust = 0.5)) +
coord_polar("y", start=0) +
# theme(legend.position="bottom") +
facet_grid(. ~ box) +
theme_light()
bp
bp<- ggplot(mammals_filtered, aes(x="", y=n, fill= Genus)) +
scale_fill_manual(values=rgb(t(col2rgb(Genus_Colors$color, alpha = FALSE)/255))) +
geom_bar(stat = "identity", position = position_fill()) +
#geom_text(aes(label = n), size=1, position = position_fill(vjust = 0.5)) +
coord_polar("y", start=0) +
# theme(legend.position="bottom") +
facet_grid(. ~ box) +
theme_light()
bp
bp<- ggplot(mammals_filtered, aes(x="", y=n, fill= Genus)) +
scale_fill_manual(values=rgb(t(col2rgb(Genus_Colors$color, alpha = FALSE)/255))) +
geom_bar(stat = "identity", position = position_fill()) +
coord_polar("y", start=0) +
facet_wrap(. ~ box) +
theme_light()
bp<- ggplot(mammals_filtered, aes(x="", y=n, fill= Genus)) +
scale_fill_manual(values=rgb(t(col2rgb(Genus_Colors$color, alpha = FALSE)/255))) +
geom_bar(stat = "identity", position = position_fill()) +
coord_polar("y", start=0) +
facet_wrap(~ box) +
theme_light()
bp
bp<- ggplot(mammals_filtered, aes(x="", y=n, fill= Genus)) +
scale_fill_manual(values=rgb(t(col2rgb(Genus_Colors$color, alpha = FALSE)/255))) +
geom_bar(stat = "identity", position = position_fill()) +
coord_polar("y", start=0) +
facet_grid(.~ box) +
theme_light()
bp
pdf(file="output/mammal_nisp.pdf", width=15, height=7.5, encoding="MacRoman")
bp
dev.off()
levels(mammals_filtered$Family)
levels(mammals_filtered$Order)
levels(mammals$Order)
levels(mammals_trim$Order)
# calculate NISP ----
# read in master mammal data
mammals <- read.delim("data/processed/master_mammal_file.txt", sep="\t", stringsAsFactors = F)
taxonomy <- read.delim("data/raw/TaxonomyMatchingFile.txt", sep="\t", stringsAsFactors = F)
taxon <- as.data.frame(matrix(ncol=4, nrow=nrow(mammals)))
colnames(taxon) <- c('RevisedName', "Order", "Family", "Genus")
for (i in 1:nrow(taxon)){
taxon[i,] <- taxonomy[which(taxonomy$'OriginalName' == mammals$prelim_taxon_name[i]),c('RevisedName', "Order", "Family", "Genus")]
}
mammals_trim <- select(mammals, "prelim_taxon_name", "box")
mammals_trim <- cbind(mammals_trim, taxon)
mammals_trim$Family <- as.factor(mammals_trim$Family)
mammals_trim$Order <- as.factor(mammals_trim$Order)
mammals_trim$Genus <- as.factor(mammals_trim$Genus)
mammals_trim$box <- as.factor(mammals_trim$box)
mammals_filtered <- mammals_trim %>%
filter(!is.na(Family)) %>%
filter(Order != "Carnivora") %>%
filter(Order != "Artiodactyla") %>%
filter(!is.na(Genus))
mammals_filtered$Order <- droplevels(mammals_filtered$Order)
mammals_filtered$Family <- droplevels(mammals_filtered$Family)
mammals_filtered$Genus <- droplevels(mammals_filtered$Genus)
mammals_filtered <- mammals_filtered %>%
group_by(box, RevisedName, Family, Genus) %>%
summarise(n=n())
Genus_Colors <- NULL
start <- 0
stop <- 0
for (i in 1:length(levels(mammals_filtered$Family))){
Genera <- unique(mammals_filtered[which(mammals_filtered$Family==levels(mammals_filtered$Family)[i]),'Genus'])
nGenera <- nrow(Genera)
if (nGenera <= 3){
stop <- start+20
}else{
stop <- start+50
}
show_col(hue_pal(h = c(start, stop))(nGenera))
Genus_Colors <- rbind(Genus_Colors, cbind(Genera, hue_pal(h = c(start, stop))(nGenera)))
start <- stop+20
}
colnames(Genus_Colors)[2] <- "color"
# reorder Genus levels to match taxonomy in Genus_Colors
mammals_filtered$Genus <- factor(mammals_filtered$Genus,levels(mammals_filtered$Genus)[match(Genus_Colors[,'Genus'], levels(mammals_filtered$Genus))])
library(tidyverse)
# read in master mammal data
mammals <- read.delim("data/processed/master_mammal_file.txt", sep="\t", stringsAsFactors = F)
taxonomy <- read.delim("data/raw/TaxonomyMatchingFile.txt", sep="\t", stringsAsFactors = F)
taxon <- as.data.frame(matrix(ncol=4, nrow=nrow(mammals)))
colnames(taxon) <- c('RevisedName', "Order", "Family", "Genus")
for (i in 1:nrow(taxon)){
taxon[i,] <- taxonomy[which(taxonomy$'OriginalName' == mammals$prelim_taxon_name[i]),c('RevisedName', "Order", "Family", "Genus")]
}
mammals_trim <- select(mammals, "prelim_taxon_name", "box")
mammals_trim <- cbind(mammals_trim, taxon)
mammals_trim$Family <- as.factor(mammals_trim$Family)
mammals_trim$Order <- as.factor(mammals_trim$Order)
mammals_trim$Genus <- as.factor(mammals_trim$Genus)
mammals_trim$box <- as.factor(mammals_trim$box)
mammals_filtered <- mammals_trim %>%
filter(!is.na(Family)) %>%
filter(Order != "Carnivora") %>%
filter(Order != "Artiodactyla") %>%
filter(!is.na(Genus))
mammals_filtered$Order <- droplevels(mammals_filtered$Order)
mammals_filtered$Family <- droplevels(mammals_filtered$Family)
mammals_filtered$Genus <- droplevels(mammals_filtered$Genus)
mammals_filtered <- mammals_filtered %>%
group_by(box, RevisedName, Family, Genus) %>%
summarise(n=n())
Genus_Colors <- NULL
start <- 0
stop <- 0
for (i in 1:length(levels(mammals_filtered$Family))){
Genera <- unique(mammals_filtered[which(mammals_filtered$Family==levels(mammals_filtered$Family)[i]),'Genus'])
nGenera <- nrow(Genera)
if (nGenera <= 3){
stop <- start+20
}else{
stop <- start+50
}
show_col(hue_pal(h = c(start, stop))(nGenera))
Genus_Colors <- rbind(Genus_Colors, cbind(Genera, hue_pal(h = c(start, stop))(nGenera)))
start <- stop+20
}
colnames(Genus_Colors)[2] <- "color"
??show_col
library(scales)
??hue_pal
Genus_Colors <- NULL
start <- 0
stop <- 0
for (i in 1:length(levels(mammals_filtered$Family))){
Genera <- unique(mammals_filtered[which(mammals_filtered$Family==levels(mammals_filtered$Family)[i]),'Genus'])
nGenera <- nrow(Genera)
if (nGenera <= 3){
stop <- start+20
}else{
stop <- start+50
}
show_col(hue_pal(h = c(start, stop))(nGenera))
Genus_Colors <- rbind(Genus_Colors, cbind(Genera, hue_pal(h = c(start, stop))(nGenera)))
start <- stop+20
}
colnames(Genus_Colors)[2] <- "color"
# reorder Genus levels to match taxonomy in Genus_Colors
mammals_filtered$Genus <- factor(mammals_filtered$Genus,levels(mammals_filtered$Genus)[match(Genus_Colors[,'Genus'], levels(mammals_filtered$Genus))])
Genus_Colors
# read in files
iso <- read.delim("data/processed/master_isotopes_file.txt", sep="\t", stringsAsFactors = F)
dates <- read.delim("data/processed/master_dates_file.txt", sep="\t", stringsAsFactors = F)
# merge dates and isotopes ----
# first, fix suspect UCIAMS number in isotope data
iso[which(iso$UCIAMS_Number == 191244),'UCIAMS_Number'] <- 191242
# find matches based on UCIAMS number
matches <- match(iso$UCIAMS_Number, dates$UCIAMS_Number)
# isotopes without date matches - remove these rows from iso dataframe
iso <- iso[-which(is.na(matches)),]
# isotopes with date  matches - add dates to the iso dataframe
iso <- cbind(iso, dates[na.omit(matches),c('X14C_age_BP', 'X14C_age_error')])
# replace > dates with numbers
for (i in 1:nrow(iso)){
if (length(grep(">", iso[i,'X14C_age_BP']))>0){
iso[i,'X14C_age_BP'] <- 50000
}
}
iso$X14C_age_BP <- as.numeric(iso$X14C_age_BP)
iso$box <- as.factor(iso$box)
#rename audubonii so it's standardized
iso$prelim_taxon_name[c(grep("Sylvilagus audubonii", iso$prelim_taxon_name),
grep("Sylvilagus cf. auduboni", iso$prelim_taxon_name),
grep("Sylvilagus cf audubonii", iso$prelim_taxon_name))] <- "Sylvilagus audubonii"
iso$prelim_taxon_name <- as.factor(iso$prelim_taxon_name)
select(iso, Species = prelim_taxon_name, N15 = del15N_permil, C13 = del13C_permil, box, Age_14C= X14C_age_BP, Error_14C = X14C_age_error)
iso_filtered <- select(iso, Species = prelim_taxon_name, N15 = del15N_permil, C13 = del13C_permil, Box=box, Age_14C= X14C_age_BP, Error_14C = X14C_age_error)
iso_filtered <- iso_filtered %>%
filter(Species == "Sylvilagus audubonii" | Species == "Otospermophilus beecheyi")
long_iso <- iso_filtered %>%
gather(Isotope, Value, N15:C13)
facet_names <- list(
'C13'=expression({delta}^13*C),
'N15'=expression({delta}^14*N)
)
facet_labeller <- function(variable,value){
return(facet_names[value])
}
matchingColors <-
# Sylvilagus #00BE67
# Otospermophilus #00BDD1
par <- ggplot(long_iso, aes(x=Age_14C,
y=Value,
color=Species,
shape=Box)) +
geom_point() +
geom_smooth(method="lm") +
scale_x_reverse() +
xlab("Age (14C)") +
ylab(expression(~'\u2030')) +
#theme_bw()
theme_light()
par + facet_grid(Isotope ~ ., scales="free", labeller=facet_labeller)
long_iso
long_iso$Species
matchingColors <-
# Sylvilagus #00BE67
# Otospermophilus #00BDD1
par <- ggplot(long_iso, aes(x=Age_14C,
y=Value,
color=Species,
shape=Box)) +
geom_point() +
geom_smooth(method="lm") +
scale_x_reverse() +
scale_fill_manual(values= c('#00BDD1', '#00BE67')) +
xlab("Age (14C)") +
ylab(expression(~'\u2030')) +
#theme_bw()
theme_light()
par + facet_grid(Isotope ~ ., scales="free", labeller=facet_labeller)
?scale_fill_manual
matchingColors <-
# Sylvilagus #00BE67
# Otospermophilus #00BDD1
par <- ggplot(long_iso, aes(x=Age_14C,
y=Value,
color=Species,
shape=Box)) +
geom_point() +
geom_smooth(method="lm") +
scale_x_reverse() +
scale_color_manual(values= c("Otospermophilus beecheyi"='#00BDD1', "Sylvilagus audubonii"='#00BE67')) +
xlab("Age (14C)") +
ylab(expression(~'\u2030')) +
#theme_bw()
theme_light()
par + facet_grid(Isotope ~ ., scales="free", labeller=facet_labeller)
par +
facet_grid(Isotope ~ ., scales="free", labeller=facet_labeller) +
theme(strip.text.y = element_text(size = 12, colour = "orange", angle = 90))
par +
facet_grid(Isotope ~ ., scales="free", labeller=facet_labeller) +
theme(strip.text.y = element_text(size = 12, colour = "black", angle = 90))
par +
facet_grid(Isotope ~ ., scales="free", labeller=facet_labeller) +
theme(strip.text.y = element_text(size = 12, colour = "black", angle = 0))
par +
facet_grid(Isotope ~ ., scales="free", labeller=facet_labeller) +
theme(strip.text.y = element_text(size = 12, colour = "black", angle = -90))
pdf(file="output/isotopes.pdf", width=15, height=7.5, encoding="MacRoman") # 15, 7.5
par +
facet_grid(Isotope ~ ., scales="free", labeller=facet_labeller) +
theme(strip.text.y = element_text(size = 12, colour = "black", angle = -90))
dev.off()
matchingColors <-
# Sylvilagus #00BE67
# Otospermophilus #00BDD1
par <- ggplot(long_iso, aes(x=Age_14C,
y=Value,
color=Species,
shape=Box)) +
geom_point(aes(size=5)) +
geom_smooth(method="lm") +
scale_x_reverse() +
scale_color_manual(values= c("Otospermophilus beecheyi"='#00BDD1', "Sylvilagus audubonii"='#00BE67')) +
xlab("Age (14C)") +
ylab(expression(~'\u2030')) +
#theme_bw()
theme_light()
par +
facet_grid(Isotope ~ ., scales="free", labeller=facet_labeller) +
theme(strip.text.y = element_text(size = 12, colour = "black", angle = -90))
matchingColors <-
# Sylvilagus #00BE67
# Otospermophilus #00BDD1
par <- ggplot(long_iso, aes(x=Age_14C,
y=Value,
color=Species,
shape=Box)) +
geom_point(aes(size=3)) +
geom_smooth(method="lm") +
scale_x_reverse() +
scale_color_manual(values= c("Otospermophilus beecheyi"='#00BDD1', "Sylvilagus audubonii"='#00BE67')) +
xlab("Age (14C)") +
ylab(expression(~'\u2030')) +
#theme_bw()
theme_light()
par +
facet_grid(Isotope ~ ., scales="free", labeller=facet_labeller) +
theme(strip.text.y = element_text(size = 12, colour = "black", angle = -90))
matchingColors <-
# Sylvilagus #00BE67
# Otospermophilus #00BDD1
par <- ggplot(long_iso, aes(x=Age_14C,
y=Value,
color=Species,
shape=Box)) +
geom_point(aes(size=2)) +
geom_smooth(method="lm") +
scale_x_reverse() +
scale_color_manual(values= c("Otospermophilus beecheyi"='#00BDD1', "Sylvilagus audubonii"='#00BE67')) +
xlab("Age (14C)") +
ylab(expression(~'\u2030')) +
#theme_bw()
theme_light()
pdf(file="output/isotopes.pdf", width=15, height=7.5, encoding="MacRoman") # 15, 7.5
par +
facet_grid(Isotope ~ ., scales="free", labeller=facet_labeller) +
theme(strip.text.y = element_text(size = 12, colour = "black", angle = -90))
dev.off()
pdf(file="output/isotopes.pdf", width=15, height=7.5) # 15, 7.5 #encoding="MacRoman"
par +
facet_grid(Isotope ~ ., scales="free", labeller=facet_labeller) +
theme(strip.text.y = element_text(size = 12, colour = "black", angle = -90))
dev.off()
warnings()
matchingColors <-
# Sylvilagus #00BE67
# Otospermophilus #00BDD1
par <- ggplot(long_iso, aes(x=Age_14C,
y=Value,
color=Species,
shape=Box, size=2)) +
geom_point() +
geom_smooth(method="lm") +
scale_x_reverse() +
scale_color_manual(values= c("Otospermophilus beecheyi"='#00BDD1', "Sylvilagus audubonii"='#00BE67')) +
xlab("Age (14C)") +
ylab(expression(~'\u2030')) +
#theme_bw()
theme_light()
par +
facet_grid(Isotope ~ ., scales="free", labeller=facet_labeller) +
theme(strip.text.y = element_text(size = 12, colour = "black", angle = -90))
matchingColors <-
# Sylvilagus #00BE67
# Otospermophilus #00BDD1
par <- ggplot(long_iso, aes(x=Age_14C,
y=Value,
color=Species,
shape=Box)) +
geom_point() +
geom_smooth(method="lm") +
scale_x_reverse() +
scale_color_manual(values= c("Otospermophilus beecheyi"='#00BDD1', "Sylvilagus audubonii"='#00BE67')) +
xlab("Age (14C)") +
ylab(expression(~'\u2030')) +
#theme_bw()
theme_light()
par +
facet_grid(Isotope ~ ., scales="free", labeller=facet_labeller) +
theme(strip.text.y = element_text(size = 12, colour = "black", angle = -90))
pdf(file="output/isotopes.pdf", width=15, height=7.5, encoding="MacRoman") # 15, 7.5 #
par +
facet_grid(Isotope ~ ., scales="free", labeller=facet_labeller) +
theme(strip.text.y = element_text(size = 12, colour = "black", angle = -90))
dev.off()
par +
facet_grid(Isotope ~ ., scales="free", labeller=facet_labeller) +
theme(strip.text.y = element_text(size = 12, colour = "black", angle = -90))
